#!/usr/bin/env -S mycmd project run
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

set -o nounset -o errexit -o errtrace -o pipefail

#----------------------------------------
# Shell Script Support
project.load_task_library "shell"

project.register_fileset SHELL_FILES
# shellcheck disable=SC2154
project.add_files_to_fileset SHELL_FILES "${MYPROJECT_PROJECT_FILE}"

project.register_task_with_fileset list-shell-files project.list-files SHELL_FILES
project.register_task_with_fileset format-shell project:shell.format SHELL_FILES
project.register_task_with_fileset lint-shell project:shell.lint SHELL_FILES

#----------------------------------------
# Go Support

# First, a list of the commands that will be created
# shellcheck disable=SC2154
readonly COMMANDS_BASE_DIR="${MYPROJECT_BASE_DIR}/cmd"
declare -agx COMMAND_NAMES=()

mycmd.defer_at_startup mycmd.init_bin find
function get_command_names() {
    readarray -t COMMAND_NAMES < \
        <(mycmd.bin_execute find "${COMMANDS_BASE_DIR}" -mindepth 1 -type d -printf "%f\n" |
              LC_ALL=en_US.UTF-8 sort || true)
    readonly COMMAND_NAMES
}
get_command_names


mycmd.defer_at_startup mycmd.init_bin go

function install-go-command-if-needed() {
    local -r cmd="${1}"
    local -r fq_cmd="${2}"

    if ! command -v "${cmd}" &> /dev/null; then
        mycmd.bin_execute go install "${fq_cmd}"
    fi
}

function install-doom-deps() {
    # Based on https://github.com/doomemacs/doomemacs/tree/master/modules/lang/go#dependencies
    install-go-command-if-needed gocode github.com/stamblerre/gocode@latest
    install-go-command-if-needed godoc golang.org/x/tools/cmd/godoc@latest
    install-go-command-if-needed goimports golang.org/x/tools/cmd/goimports@latest
    install-go-command-if-needed gomodifytags github.com/fatih/gomodifytags@latest
    install-go-command-if-needed gopls golang.org/x/tools/gopls@latest
    install-go-command-if-needed gore github.com/x-motemen/gore/cmd/gore@latest
    install-go-command-if-needed gorename golang.org/x/tools/cmd/gorename@latest
    install-go-command-if-needed gotests github.com/cweill/gotests/gotests@latest
    install-go-command-if-needed guru golang.org/x/tools/cmd/guru@latest
}
project.register_task install-doom-deps

function go-lines() {
    mycmd.bin_execute go run github.com/segmentio/golines@latest --write-output --max-len=100 --tab-len=8 --reformat-tags --shorten-comments .
}
project.register_task go-lines

function go-imports() {
    mycmd.bin_execute go run golang.org/x/tools/cmd/goimports@latest -w .
}
project.register_task go-imports

function go-fmt() {
    mycmd.bin_execute go fmt -x ./...
}
project.register_task go-fmt

function format() {
    project.execute_tasks format-shell go-imports go-lines
}
project.register_task format

function go-mod-tidy() {
    mycmd.bin_execute go mod tidy
}
project.register_task go-mod-tidy

function list-available-dependency-updates() {
    mycmd.bin_execute go list -u -m all
}
project.register_task list-available-dependency-updates

function update-dependencies-to-latest() {
    mycmd.bin_execute go get -u ./...

    project.execute_tasks go-mod-tidy
}
project.register_task update-dependencies-to-latest

mycmd.defer_at_startup mycmd.init_bin sed
mycmd.defer_at_startup mycmd.init_bin grep
function update-go-language-version-to-latest() {
    local latest_version
    # Sample output: go version go1.22.1 darwin/arm64
    if ! latest_version="$(mycmd.bin_execute go version | mycmd.bin_execute sed -r -n 's/go version go([^ ]+) .*/\1/p')"; then
       mycmd.err_exit 1 "Error getting go version"
    fi
    readonly latest_version

    project.output_only_if_not_quiet "Current Go version: ${latest_version}."

    if ! mycmd.bin_execute grep -q "^go ${latest_version}$" go.mod; then
        project.output_only_if_not_quiet "Updating Go version to ${latest_version}."
        mycmd.bin_execute go mod edit -go="${latest_version}"
    else
        project.output_only_if_not_quiet "Already at the latest Go version, ${latest_version}."
    fi
}
project.register_task update-go-language-version-to-latest

mycmd.defer_at_startup mycmd.init_bin golangci-lint
function lint-golangci-lint-auto-fix() {
    local -r linter_name="${1}"

    golangci-lint run \
        --verbose \
        --disable-all --enable "${linter_name}" \
        --fix
}
project.register_task lint-golangci-lint-auto-fix

mycmd.defer_at_startup mycmd.init_bin golangci-lint
function lint-golangci-lint() {
    golangci-lint run --sort-results
}
project.register_task lint-golangci-lint

function go-vet() {
    mycmd.bin_execute go vet
}
project.register_task go-vet

function lint-all() {
    project.execute_tasks lint-shell go-vet lint-golangci-lint
}
project.register_task lint-all

function run-dump-doc() {
    mycmd.bin_execute go run github.com/travisbhartwell/bashdoc/cmd/dump-doc
}
project.register_task run-dump_doc

function run-dump-script-structure() {
    mycmd.bin_execute go run github.com/travisbhartwell/bashdoc/cmd/dump-script-structure "${@}"
}
project.register_task run-dump-script-structure

function run-index-shell-functions() {
    mycmd.bin_execute go run github.com/travisbhartwell/bashdoc/cmd/index-shell-functions "${@}"
}
project.register_task run-index-shell-functions

mycmd.defer_at_startup mycmd.init_bin tmux
mycmd.defer_at_startup mycmd.init_bin curl
function go-doc() {
    if [[ -v TMUX ]]; then
        # shellcheck disable=SC2154
        mycmd.bin_execute tmux -CC new-window -c "${MYPROJECT_BASE_DIR}" -d 'go run golang.org/x/tools/cmd/godoc@latest'

        mycmd.log "Waiting for docs site to start."
        curl --silent --head -X GET --retry 20 --retry-connrefused --retry-delay 1 http://localhost:6060

        open http://localhost:6060
    else
        mycmd.bin_execute go run golang.org/x/tools/cmd/godoc@latest
    fi
}
project.register_task go-doc

function build() {
    mycmd.bin_execute go build -v ./...
}
project.register_task build

function install-project-cmd() {
    local -r cmd="${1}"

    project.output_only_if_not_quiet "Installing ${cmd}."
    mycmd.bin_execute go install "github.com/travisbhartwell/bashdoc/cmd/${cmd}"
}

function go-install() {
    local cmd

    for cmd in "${COMMAND_NAMES[@]}"; do
        if ! install-project-cmd "${cmd}"; then
            return 1
        fi
    done
}
project.register_task go-install

mycmd.defer_at_startup mycmd.init_bin install
function install-to-local-bin() {
    local go_path_root
    if ! go_path_root="$(go env GOPATH)"; then
        project.output_only_if_not_quiet "Error getting the GOPATH value."
        return 1
    fi
    readonly go_path_root

    local -r bin_dir="${go_path_root}/bin"
    if [[ ! -d "${bin_dir}" ]]; then
        project.output_only_if_not_quiet "Error getting GOPATH bin directory."
        return 1
    fi

    local -r local_bin="${HOME}/.local/bin"

    project.execute_tasks go-install

    for cmd in "${COMMAND_NAMES[@]}"; do
        project.output_only_if_not_quiet "Installing ${cmd} to ${local_bin}."
        mycmd.bin_execute install -C -v "${bin_dir}/${cmd}" "${local_bin}"
    done
}
project.register_task install-to-local-bin
